// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson344736e9DecodeMygoModels(in *jlexer.Lexer, out *ContentModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contentId":
			out.ContentId = uint64(in.Uint64())
		case "contentType":
			out.ContentType = int(in.Int())
		case "userId":
			out.UserId = uint64(in.Uint64())
		case "title":
			out.Title = string(in.String())
		case "content":
			out.Content = string(in.String())
		case "cover":
			out.Cover = string(in.String())
		case "atUserIds":
			out.AtUserIds = string(in.String())
		case "showStatus":
			out.ShowStatus = int(in.Int())
		case "sourceApp":
			out.SourceApp = string(in.String())
		case "del":
			out.Del = int(in.Int())
		case "addTime":
			out.AddTime = int64(in.Int64())
		case "editTime":
			out.EditTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson344736e9EncodeMygoModels(out *jwriter.Writer, in ContentModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contentId\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ContentId))
	}
	{
		const prefix string = ",\"contentType\":"
		out.RawString(prefix)
		out.Int(int(in.ContentType))
	}
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.UserId))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"cover\":"
		out.RawString(prefix)
		out.String(string(in.Cover))
	}
	{
		const prefix string = ",\"atUserIds\":"
		out.RawString(prefix)
		out.String(string(in.AtUserIds))
	}
	{
		const prefix string = ",\"showStatus\":"
		out.RawString(prefix)
		out.Int(int(in.ShowStatus))
	}
	{
		const prefix string = ",\"sourceApp\":"
		out.RawString(prefix)
		out.String(string(in.SourceApp))
	}
	{
		const prefix string = ",\"del\":"
		out.RawString(prefix)
		out.Int(int(in.Del))
	}
	{
		const prefix string = ",\"addTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.AddTime))
	}
	{
		const prefix string = ",\"editTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.EditTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContentModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson344736e9EncodeMygoModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContentModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson344736e9EncodeMygoModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContentModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson344736e9DecodeMygoModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContentModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson344736e9DecodeMygoModels(l, v)
}
